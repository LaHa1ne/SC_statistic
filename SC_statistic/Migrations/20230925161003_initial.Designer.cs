// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SC_statistic.DataAccessLayer;

#nullable disable

namespace SC_statistic.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230925161003_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SC_statistic.DataLayer.DTO.Statistic.Session", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("TrackedPlayerId")
                        .HasColumnType("char(36)");

                    b.HasKey("SessionId");

                    b.HasIndex("TrackedPlayerId", "StartDate");

                    b.ToTable("sessions", (string)null);
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.Checkpoint", b =>
                {
                    b.Property<Guid>("CheckpointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("char(36)");

                    b.HasKey("CheckpointId");

                    b.HasIndex("SessionId", "Date");

                    b.ToTable("checkpoints", (string)null);
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.Corporation", b =>
                {
                    b.Property<long>("CorporationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CurrentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrentTag")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("PveRating")
                        .HasColumnType("int");

                    b.Property<int>("PvpRating")
                        .HasColumnType("int");

                    b.HasKey("CorporationId");

                    b.HasIndex("CurrentName");

                    b.HasIndex("CurrentTag");

                    b.ToTable("corporations", (string)null);
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.Notification", b =>
                {
                    b.Property<long>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex(new[] { "Date" }, "Date_index");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.Player", b =>
                {
                    b.Property<long>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrentCorporationId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrentNickname")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<bool>("IsInformationCorrect")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("PlayerId");

                    b.HasIndex("CurrentCorporationId");

                    b.HasIndex("CurrentNickname", "IsInformationCorrect");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.PlayerCorporationHistory", b =>
                {
                    b.Property<long>("PlayerCorporationHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CorporationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.HasKey("PlayerCorporationHistoryId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("PlayerId", "Date")
                        .IsUnique();

                    b.ToTable("playercorporationhistories", (string)null);
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.PlayerNicknameHistory", b =>
                {
                    b.Property<long>("PlayerNicknameHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.HasKey("PlayerNicknameHistoryId");

                    b.HasIndex("PlayerId", "Date")
                        .IsUnique();

                    b.ToTable("playernicknamehistories", (string)null);
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.TrackedPlayer", b =>
                {
                    b.Property<Guid>("TrackedPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("TrackedPlayerId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("UserId", "PlayerId")
                        .IsUnique();

                    b.ToTable("trackedplayers", (string)null);
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Login" }, "Login_UNIQUE")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SC_statistic.DataLayer.DTO.Statistic.Session", b =>
                {
                    b.HasOne("SC_statistic.DataLayer.Entities.TrackedPlayer", "TrackedPlayer")
                        .WithMany("Sessions")
                        .HasForeignKey("TrackedPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrackedPlayer");
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.Checkpoint", b =>
                {
                    b.HasOne("SC_statistic.DataLayer.DTO.Statistic.Session", "Session")
                        .WithMany("Checkpoints")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SC_statistic.DataLayer.Entities.CheckpointStat", "CheckpointStat", b1 =>
                        {
                            b1.Property<Guid>("CheckpointId")
                                .HasColumnType("char(36)");

                            b1.Property<int>("GamePlayed")
                                .HasColumnType("int");

                            b1.Property<int>("GameWin")
                                .HasColumnType("int");

                            b1.Property<int>("TotalAssists")
                                .HasColumnType("int");

                            b1.Property<int>("TotalDeath")
                                .HasColumnType("int");

                            b1.Property<int>("TotalKill")
                                .HasColumnType("int");

                            b1.HasKey("CheckpointId");

                            b1.ToTable("checkpoints");

                            b1.WithOwner()
                                .HasForeignKey("CheckpointId");
                        });

                    b.Navigation("CheckpointStat")
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.Player", b =>
                {
                    b.HasOne("SC_statistic.DataLayer.Entities.Corporation", "CurrentCorporation")
                        .WithMany("Players")
                        .HasForeignKey("CurrentCorporationId");

                    b.Navigation("CurrentCorporation");
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.PlayerCorporationHistory", b =>
                {
                    b.HasOne("SC_statistic.DataLayer.Entities.Corporation", "Corporation")
                        .WithMany("CorporationHistories")
                        .HasForeignKey("CorporationId");

                    b.HasOne("SC_statistic.DataLayer.Entities.Player", "Player")
                        .WithMany("CorporationHistory")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.PlayerNicknameHistory", b =>
                {
                    b.HasOne("SC_statistic.DataLayer.Entities.Player", "Player")
                        .WithMany("NicknameHistory")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.TrackedPlayer", b =>
                {
                    b.HasOne("SC_statistic.DataLayer.Entities.Player", "Player")
                        .WithMany("TrackedPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SC_statistic.DataLayer.Entities.User", "User")
                        .WithMany("TrackedPlayers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SC_statistic.DataLayer.DTO.Statistic.Session", b =>
                {
                    b.Navigation("Checkpoints");
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.Corporation", b =>
                {
                    b.Navigation("CorporationHistories");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.Player", b =>
                {
                    b.Navigation("CorporationHistory");

                    b.Navigation("NicknameHistory");

                    b.Navigation("TrackedPlayers");
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.TrackedPlayer", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.User", b =>
                {
                    b.Navigation("TrackedPlayers");
                });
#pragma warning restore 612, 618
        }
    }
}
