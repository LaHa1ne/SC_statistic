// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SC_statistic.DataAccessLayer;

#nullable disable

namespace SC_statistic.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230717155001_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.Corporation", b =>
                {
                    b.Property<long>("CorporationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CurrentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrentTag")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("PveRating")
                        .HasColumnType("int");

                    b.Property<int>("PvpRating")
                        .HasColumnType("int");

                    b.HasKey("CorporationId");

                    b.HasIndex("CurrentName")
                        .IsUnique();

                    b.HasIndex("CurrentTag");

                    b.ToTable("corporations", (string)null);

                    b.HasData(
                        new
                        {
                            CorporationId = 4505L,
                            CurrentName = "44cd",
                            CurrentTag = "4CB",
                            PveRating = 50,
                            PvpRating = 10
                        },
                        new
                        {
                            CorporationId = 5861L,
                            CurrentName = "Lamento el Teaming",
                            CurrentTag = "LET",
                            PveRating = 12652,
                            PvpRating = 19313
                        });
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.Notification", b =>
                {
                    b.Property<long>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex(new[] { "Date" }, "Date_index");

                    b.ToTable("notifications", (string)null);

                    b.HasData(
                        new
                        {
                            NotificationId = 1L,
                            Date = new DateTime(2023, 7, 17, 18, 50, 1, 737, DateTimeKind.Local).AddTicks(4646),
                            Text = "Системное1",
                            Type = 3
                        },
                        new
                        {
                            NotificationId = 2L,
                            Date = new DateTime(2023, 7, 17, 18, 50, 2, 737, DateTimeKind.Local).AddTicks(4659),
                            Text = "Игрок1",
                            Type = 0
                        },
                        new
                        {
                            NotificationId = 3L,
                            Date = new DateTime(2023, 7, 17, 18, 50, 3, 737, DateTimeKind.Local).AddTicks(4660),
                            Text = "Смена корп1",
                            Type = 2
                        },
                        new
                        {
                            NotificationId = 4L,
                            Date = new DateTime(2023, 7, 17, 18, 50, 4, 737, DateTimeKind.Local).AddTicks(4661),
                            Text = "Смена назв1",
                            Type = 1
                        },
                        new
                        {
                            NotificationId = 5L,
                            Date = new DateTime(2023, 7, 17, 18, 50, 5, 737, DateTimeKind.Local).AddTicks(4662),
                            Text = "Системное2",
                            Type = 3
                        },
                        new
                        {
                            NotificationId = 6L,
                            Date = new DateTime(2023, 7, 17, 18, 50, 6, 737, DateTimeKind.Local).AddTicks(4665),
                            Text = "Игрок2",
                            Type = 0
                        },
                        new
                        {
                            NotificationId = 7L,
                            Date = new DateTime(2023, 7, 17, 18, 50, 7, 737, DateTimeKind.Local).AddTicks(4666),
                            Text = "Смена корп2",
                            Type = 2
                        },
                        new
                        {
                            NotificationId = 8L,
                            Date = new DateTime(2023, 7, 17, 18, 50, 8, 737, DateTimeKind.Local).AddTicks(4667),
                            Text = "Смена назв2",
                            Type = 1
                        },
                        new
                        {
                            NotificationId = 9L,
                            Date = new DateTime(2023, 7, 17, 18, 50, 9, 737, DateTimeKind.Local).AddTicks(4668),
                            Text = "Системное3",
                            Type = 3
                        },
                        new
                        {
                            NotificationId = 10L,
                            Date = new DateTime(2023, 7, 17, 18, 50, 10, 737, DateTimeKind.Local).AddTicks(4669),
                            Text = "Игрок3",
                            Type = 0
                        },
                        new
                        {
                            NotificationId = 11L,
                            Date = new DateTime(2023, 7, 17, 18, 50, 11, 737, DateTimeKind.Local).AddTicks(4670),
                            Text = "Смена корп3",
                            Type = 2
                        },
                        new
                        {
                            NotificationId = 12L,
                            Date = new DateTime(2023, 7, 17, 18, 50, 12, 737, DateTimeKind.Local).AddTicks(4671),
                            Text = "Смена назв3",
                            Type = 1
                        },
                        new
                        {
                            NotificationId = 13L,
                            Date = new DateTime(2023, 7, 17, 18, 50, 13, 737, DateTimeKind.Local).AddTicks(4672),
                            Text = "Системное4",
                            Type = 3
                        },
                        new
                        {
                            NotificationId = 14L,
                            Date = new DateTime(2023, 7, 17, 18, 50, 14, 737, DateTimeKind.Local).AddTicks(4673),
                            Text = "Игрок4",
                            Type = 0
                        },
                        new
                        {
                            NotificationId = 15L,
                            Date = new DateTime(2023, 7, 17, 18, 50, 15, 737, DateTimeKind.Local).AddTicks(4674),
                            Text = "Смена корп4",
                            Type = 2
                        },
                        new
                        {
                            NotificationId = 16L,
                            Date = new DateTime(2023, 7, 17, 18, 50, 16, 737, DateTimeKind.Local).AddTicks(4675),
                            Text = "Смена назв4",
                            Type = 1
                        });
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.Player", b =>
                {
                    b.Property<long>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrentCorporationId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrentNickname")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<bool>("IsInformationCorrect")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("PlayerId");

                    b.HasIndex("CurrentCorporationId");

                    b.HasIndex("UserId");

                    b.HasIndex("CurrentNickname", "IsInformationCorrect");

                    b.ToTable("players", (string)null);

                    b.HasData(
                        new
                        {
                            PlayerId = 585650L,
                            CurrentCorporationId = 4505L,
                            CurrentNickname = "fantazm",
                            IsInformationCorrect = true
                        },
                        new
                        {
                            PlayerId = 2177186L,
                            CurrentCorporationId = 4505L,
                            CurrentNickname = "AggressiveStyle",
                            IsInformationCorrect = true
                        });
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.PlayerCorporationHistory", b =>
                {
                    b.Property<long>("PlayerCorporationHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CorporationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.HasKey("PlayerCorporationHistoryId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("PlayerId", "Date")
                        .IsUnique();

                    b.ToTable("playercorporationhistories", (string)null);

                    b.HasData(
                        new
                        {
                            PlayerCorporationHistoryId = 1L,
                            Date = new DateTime(2014, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlayerId = 585650L
                        },
                        new
                        {
                            PlayerCorporationHistoryId = 2L,
                            CorporationId = 4505L,
                            Date = new DateTime(2020, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlayerId = 585650L
                        },
                        new
                        {
                            PlayerCorporationHistoryId = 3L,
                            CorporationId = 4505L,
                            Date = new DateTime(2022, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlayerId = 2177186L
                        });
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.PlayerNicknameHistory", b =>
                {
                    b.Property<long>("PlayerNicknameHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.HasKey("PlayerNicknameHistoryId");

                    b.HasIndex("PlayerId", "Date")
                        .IsUnique();

                    b.ToTable("playernicknamehistories", (string)null);

                    b.HasData(
                        new
                        {
                            PlayerNicknameHistoryId = 1L,
                            Date = new DateTime(2015, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nickname = "Ala",
                            PlayerId = 585650L
                        },
                        new
                        {
                            PlayerNicknameHistoryId = 2L,
                            Date = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nickname = "fantazm",
                            PlayerId = 585650L
                        },
                        new
                        {
                            PlayerNicknameHistoryId = 3L,
                            Date = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nickname = "AggressiveStyle",
                            PlayerId = 2177186L
                        });
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Login" }, "Login_UNIQUE")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.Player", b =>
                {
                    b.HasOne("SC_statistic.DataLayer.Entities.Corporation", "CurrentCorporation")
                        .WithMany("Players")
                        .HasForeignKey("CurrentCorporationId");

                    b.HasOne("SC_statistic.DataLayer.Entities.User", null)
                        .WithMany("TrackedPlayers")
                        .HasForeignKey("UserId");

                    b.Navigation("CurrentCorporation");
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.PlayerCorporationHistory", b =>
                {
                    b.HasOne("SC_statistic.DataLayer.Entities.Corporation", "Corporation")
                        .WithMany("CorporationHistories")
                        .HasForeignKey("CorporationId");

                    b.HasOne("SC_statistic.DataLayer.Entities.Player", "Player")
                        .WithMany("CorporationHistory")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.PlayerNicknameHistory", b =>
                {
                    b.HasOne("SC_statistic.DataLayer.Entities.Player", "Player")
                        .WithMany("NicknameHistory")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.Corporation", b =>
                {
                    b.Navigation("CorporationHistories");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.Player", b =>
                {
                    b.Navigation("CorporationHistory");

                    b.Navigation("NicknameHistory");
                });

            modelBuilder.Entity("SC_statistic.DataLayer.Entities.User", b =>
                {
                    b.Navigation("TrackedPlayers");
                });
#pragma warning restore 612, 618
        }
    }
}
